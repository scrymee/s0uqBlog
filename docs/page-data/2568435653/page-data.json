{"componentChunkName":"component---src-templates-blog-post-js","path":"/2568435653/","result":{"data":{"site":{"siteMetadata":{"title":"s0uq's Blog"}},"markdownRemark":{"id":"8399bd96-4a60-5d7a-b5cb-bf13f259c66e","excerpt":"何人かのメンバーに同時並行的に発生する課題をお願いする機会が増えてきた。GitFlow…","html":"<p>何人かのメンバーに同時並行的に発生する課題をお願いする機会が増えてきた。GitFlowをベースにした開発手法はもちろん知っているが、どう言う方針で進めていくかに自分の考えを整理しておく。</p>\n<h2>基本構造は主ブランチと従ブランチ</h2>\n<p>最小構成要素 を主ブランチとし、そこから派生するブランチとして従ブランチがある。主ブランチは、関わる人全員で確認しうるという部分で切り分ける。従ブランチは、主ブランチの一部機能という役割を持つ。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">____________  主ブランチ\n   \\________. 従ブランチ</code></pre></div>\n<h2>構造の単位は再帰的に増え続ける</h2>\n<p>この構造は再帰的に繰り返され、見る視点によっては従ブランチが主ブランチとなることもある。</p>\n<p>以下のケースだと、ブランチBは、ブランチAから見たときは従ブランチだが、ブランチCから見ると、主ブランチとなる</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">____________  ブランチA\n   \\________. ブランチB\n      \\_____  ブランチC</code></pre></div>\n<h2>これ以上分割できない最小ブランチにfeatureプレフィックスをつける</h2>\n<p>自分が開発してる案件では、featureプレフィクスは、作業者が基本的に1人で、リモートリポジトリの強制的変更が可能なブランチにつけてもらっています。\n具体的には以下のようにコミットログに対して破壊的変更が容認されるケースとしています</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push --force-with-lease\ngit rebase 主ブランチ</code></pre></div>\n<p>リリースの単位・featureにしていたところ規模の大きい開発だと、複数メンバーが関わるため、featureからさらにfeatureブランチを切る…となりプレフィックスが煩雑になったからです。</p>\n<h2>ブランチの切り方</h2>\n<p>開発環境は以下の4パターン用意した方が良いというのをみたことがある。業務に近いところから開発に近いところまで、それぞれの環境で確認する目的が異なるからという論説だったと記憶している。</p>\n<ul>\n<li>①本番</li>\n<li>②検収</li>\n<li>③結合</li>\n<li>④開発（ローカル）</li>\n</ul>\n<p>それがしっくりきたので、ブランチも同じように環境ごとに用意した方が良いと思っています。</p>\n<h3>本番ブランチ</h3>\n<p>リリース済みのブランチとする。hotfixを除き、検収ブランチからのMergeコミットしか反映されないはず。ただ、後述するように本ブランチはなく、検収ブランチがこの役割となることが多いイメージ。</p>\n<h3>検収ブランチ</h3>\n<p>本番ブランチと分ける場合、本番にはリリースしていないが、近いうちにリリースする機能が含まれているブランチを指す。hotfixを除き結合ブランチからのMergeコミットしか反映されないはず。</p>\n<p>個人的には、特殊な事情がない限り明示的に意識しなくても良いと思う。（だから当初のgitflowのリリースブランチは一時的に作成されていたのかと今合点が言った。）\n以下のケースでなければ、本番＝検修としても良さそう。</p>\n<ul>\n<li>検収からリリースまでのペンディングが長い性質がある。</li>\n<li>本番のhotfixが多い性質がある。</li>\n<li>本番ブランチにコミットしたら即反映という環境になっている。</li>\n<li>リリース内容を管理していない。（Gitのタグやマイルストーンを使わずに、リリース管理表などがない）</li>\n</ul>\n<h3>結合ブランチ</h3>\n<p>検収前の社内確認用ブランチ。超軽微な修正等を除き、開発ブランチ・別の結合ブランチからのMergeコミットしか反映されない。経験上コミットをトリガーとしたCI/CDが導入されがち。</p>\n<p>結合ブランチさ再起的なものとして、結合ブランチを取りまとめる結合ブランチも作る時もある。</p>\n<p>▼イメージ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  ________ 会員住所・名前変更\n_/________ 会員情報変更\n   \\______ 会員メールアドレス変更</code></pre></div>\n<p>どの機能の塊で結合ブランチを作るかはブランチ運用の腕の見せ所っぽい。チケット管理していたら比較的切りやすい気がする。</p>\n<h4>検収・結合時にビジネス側要望として一部機能が不要になった場合どうする？</h4>\n<p>この疑問よくあるケースかもしれないけど、確認時のコードは、不可逆なもののため、確認後に一部機能を取り除き（その後の確認なしに）完成とする…といった芸当はできない。</p>\n<p>結局はrevertからのチェリーピックやMergeを持ってブランチを再構築し、再検収を依頼する必要がある。</p>\n<p>基本的にはログが複雑になるので全開発メンバー合意済みであれば既存ブランチを削除して同名ブランチで作り直したいところ。</p>\n<p>自分の尊敬するプロジェクトマネージャーは、事前にこの前提をステークホルダーへ共有していることが多い。確認・テストの再実施が必要になるため、期限内の完了が難しくなるので、お互い決めのタイミングできっちり決めていきましょうね。という具合にやってる。</p>\n<h4>検収・結合テスト時にバグが見つかった</h4>\n<p>環境に対応するブランチでhotfixプレフィックスでコミットを行う。その後、開発ブランチに下る形で対応をマージしていく。</p>\n<h2>開発ブランチ</h2>\n<p>結合ブランチから作られる開発者のローカルブランチ。作業者は基本1人。動作確認が完了した時に、結合ブランチへMergeする。</p>\n<h2>まとめ</h2>\n<p>一旦雑にまとめてみたけど、環境や社内ルール次第で変わるから汎用的な決め事は難しそう。案件が変われば変わりそう。</p>\n<h4>参考</h4>\n<p><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">A successful Git branching model</a></p>\n<p><a href=\"https://docs.github.com/ja/get-started/using-github/github-flow\">Githubフロー</a></p>","frontmatter":{"title":"自分のGitの運用方法","date":"October 06, 2024","description":"何人かのメンバーに同時並行的に発生する課題をお願いする機会が..."}},"previous":{"fields":{"slug":"/2565155144/"},"frontmatter":{"title":"設計書に必要な要素"}},"next":null},"pageContext":{"id":"8399bd96-4a60-5d7a-b5cb-bf13f259c66e","previousPostId":"1f04f851-9298-52f4-84d8-6b4ec5f21887","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}