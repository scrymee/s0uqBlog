<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[s0uq'S Blog RSS Feed]]></title><description><![CDATA[WIP.]]></description><link>https://scrymee.github.io/s0uqBlog</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 07 Apr 2025 23:19:22 GMT</lastBuildDate><item><title><![CDATA[自分の得意領域を知る]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2978198149/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2978198149/</guid><pubDate>Mon, 07 Apr 2025 23:18:09 GMT</pubDate><content:encoded>&lt;p&gt;あまり業界知識がない分野へアサインされる。技術者がプロジェクト管理を任される。時には、こういった自分の経験を直接活かせない業務に向き合うこともある。&lt;/p&gt;
&lt;p&gt;過去の経験や知識をそのままを活かせず、自分の自信を喪失してしまう。自信がないために判断が下せず思い通りいかず、さらに自信を失う。&lt;/p&gt;
&lt;p&gt;負のループに陥ってたので、自分を客観的に見つめ直して気づいたことを雑にまとめる&lt;/p&gt;
&lt;h1&gt;知っていることを増やす&lt;/h1&gt;
&lt;p&gt;自信の喪失は未知の知識・経験の不足から生まれる。なので最もシンプルな方法は知識を増やすことだと思う。要件として押さえるべき勘所を学ぶため、過去の関連資料を読んだり、暗黙知を他人に相談したり聞いたり。全てを読むのではなく、自分の経験をベースに何が足りないかを考え、知識を得る。自分の経験となる知識をベースに、活かせるポイントを学ぶ。&lt;/p&gt;
&lt;h1&gt;知っていることに自信を持つ&lt;/h1&gt;
&lt;p&gt;自信の喪失は、過去の経験を直接的に活かせないと感じる気持ちから生まれると思う。あまりまだうまく言葉にできないのだけど、経験が全く活かせられないことってないように思う。仕事の経験が私生活に活きたり、逆もしかりというように。
自分の経験を言葉にしておく。それは自分を守る根拠となると思う。&lt;/p&gt;
&lt;h1&gt;知らないことをわからないとアピールする&lt;/h1&gt;
&lt;p&gt;昔マネジメントに関する本を読んでいたとき、「人格と行動を分けて考える」という一節があった。行動が良くないからと言って、人格が悪いとは言えないし、マネジメントでは行動否定はしても人格否定はしないよう気を使うのが肝要。ということらしい。
これと同じで、既知の経験と未知の経験ははっきりと分けて考えた方が良い。既知の経験は責任を担保できるが、未知の事柄には責任を担保できない。
その辺り知らないことまで責任を背負う必要はなかったりする。とはいえ、知らないことははっきりと知らないと言った方が良いし、やろうとする努力は必要。でも未知の経験への向き合うときは、分けて考えた方が良いと思う。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[big things どデカいことを成し遂げたヤツらはなにをしたのか]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2959173512/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2959173512/</guid><pubDate>Sun, 30 Mar 2025 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;仕事をしていく中で、「こうあるべき」と思っている内容をできない時がある。時間の制約であったり、アサインの都合だったり、突然の体調不良など…。
また時間をかけるにつれて、全てを考慮したと思っていても想定通りに進まないこともある。&lt;/p&gt;
&lt;p&gt;この反例として、エンパイアステートビルの建築が挙げられる。100年前に建てられた102階建の高層ビルで、当時世界初の高さの建造物にも関わらず、総工費を予算内に納めている。
※出典 big things どデカいことを成し遂げたヤツらはなにをしたのか&lt;/p&gt;
&lt;p&gt;失敗するプロジェクトと、この成功例の違いについて、本の中では「革新的手法の不確実性を回避するため、実績のある既存技術にこだわった」という点、「経験不足による不確実性」を補い、想定外の出来事にも向き合えるよう、ベテランを起用したた点を挙げている。&lt;/p&gt;
&lt;p&gt;読んだ当初はなるほどな〜レベルで身に馴染んでいなかったが、最近認識をあらためている。&lt;/p&gt;
&lt;p&gt;ここでいう既存技術は、過去の前例のある技術というわけではなくて、自分で手綱を引ける技術を指しているっぽい。
要するに、あるすでにノウハウがあり、実現するための内容が確立されている技術だとして、それを読み解き、実現したいことに向けて不明点を洗い出し、レビューを繰り返し、自分で使いこなせる力を得る。&lt;/p&gt;
&lt;p&gt;このステップを踏んでようやく、「既存技術」を使えるようになるのだと思う。ただ「こんな技術があるらしいよ〜」と思うだけでは足りない。&lt;/p&gt;
&lt;p&gt;とはいっても、未経験のもの全てを知ることはできないし、資料を漁っても全てが記録に残っているとは限らない。その不確実性を補うため、「過去に既存技術を使っていたベテラン」を採用する。&lt;/p&gt;
&lt;p&gt;なるほど、理にかなってる…。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既存技術について知る&lt;/li&gt;
&lt;li&gt;経験者を採用して暗黙知への対策を知る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちょっと既存技術の理解が甘かったなあと反省するばかり。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[プロジェクト管理の不安と向き合う]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2930025785/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2930025785/</guid><pubDate>Tue, 18 Mar 2025 22:53:01 GMT</pubDate><content:encoded>&lt;p&gt;不確かな課題や問題に出くわしたとき、不安を感じる。不安がストレスに繋がってしまうこともあり、あまり良くない。どういうときに不安がないか…というときを雑にまとめる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ゴールが明確で成果物やアウトプットが明確になっている&lt;/li&gt;
&lt;li&gt;作業が細分化されておりステップバイステップで実施できる&lt;/li&gt;
&lt;li&gt;暗黙的な部分を判断するための材料・背景・手段を持ち合わせている&lt;/li&gt;
&lt;li&gt;成果物が期限までの完了を担保する方法が明確になっている&lt;/li&gt;
&lt;li&gt;成果物の達成を裏付けるスキル・経験を持っている&lt;/li&gt;
&lt;li&gt;無茶な作業になっておらず、十分な作業時間を担保できる&lt;/li&gt;
&lt;li&gt;問題が発生したときのフローについて対策を持ち合わせている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逆説的な発想だけど、不安がない状態を考える。それは全てが既知のときだと思う。スキルも技術も経験も十分で、何があるかほとんど予測できる、仮に想定外のことが起きても対処法の心得がある…というとき、個人的にだけど不安はほぼなくなる。&lt;/p&gt;
&lt;p&gt;周りの優秀なマネージャーを見ていると、不安があるときの働きかけ方が上手い人が多い。アサインが足りないなら人員を確保し、スキルが足りないなら他の人へ展開し、不確かな部分があるなら顧客への展開をしている。自分一人でできないこともあるのを理解して、他人にもどんどん頼っている。&lt;/p&gt;
&lt;p&gt;実際のところ、多方面の兼ね合いもありもっと複雑だったり、事前に備えていても突発的な事象も起こりうる。そういうときに、上手く調整・整理にも時間をかけていくのがプロジェクト管理の仕事だろうと思う。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[「正しく言う」と「嘘をつかない」は違う]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2926610530/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2926610530/</guid><pubDate>Mon, 17 Mar 2025 23:17:33 GMT</pubDate><content:encoded>&lt;p&gt;上司から繰り返し教えてもらうことの一つに「嘘をつかない」と言うのがある。よく似た言葉として「正しく言うこと」があるが、こっちはあまり言われない。この違いについてなんとなく分かってきたので雑にまとめる。&lt;/p&gt;
&lt;h2&gt;「正しく言う」は網羅的に伝える&lt;/h2&gt;
&lt;p&gt;「正しく言う」は、主張や経緯を余すことなく伝えること。感覚的だけど、重要な判断を行うとき、状況を詳細に把握する時に求められることが多い。正しい判断を行うために、理由や原因、些細な関連ごとですら余すとこなく共有しておく。
それ以外にも、何かをお願いするときだったり、判断を委ねるときは「正しく言う」ことは、方向性のブレもなく良い。&lt;/p&gt;
&lt;h2&gt;「嘘をつかない」は取捨選択する&lt;/h2&gt;
&lt;p&gt;「嘘をつかない」のは、主張や根拠に重みづけを意図的に設けるということ。網羅性は、正確な判断に必要だけど、重要ではない事柄を過度に配慮することによる判断ミスも生まれる。&lt;/p&gt;
&lt;p&gt;一方で、上手く主張に重み付けをすれば、双方が得をする案も生まれる。&lt;/p&gt;
&lt;p&gt;例えば…
「社内リソースが足りない」という課題が生まれ、そこから代案を考える必要に迫られたとする。その後に「代案の方が良いと思ったので…」と重みづけして主張する。当たり前だけど後発的な主張にも嘘をついてはいけない。&lt;/p&gt;
&lt;p&gt;個人的な感覚だけど、ネガティブな理由をいうと原因究明・再発防止策の検討などが必要になり、目的にそぐわない方向へ進むことが多い。そういった時は重み付けを変えて「嘘をつかない」方が重要な時もある。&lt;/p&gt;
&lt;h2&gt;結局はバランス&lt;/h2&gt;
&lt;p&gt;どちらが正しいとかではなかったりする。案外素直に伝えた方が良いこともあるし、そうでなかったりする時もある。どっちのパターンも心得ておこうと言うところかもしれない。
経験上は、「なんか嘘ついてるみたいで嫌だな…」と後ろめたい気持ちを払拭できないと、相手にその違和感は伝わってしまうので、素直に言うのもありだと思う。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[身近なものを大切にする]]></title><description><![CDATA[問題や課題に直面した時、学ぶ必要性を感じることがある。そういったときに、学びを得る手段について、雑にまとめる ググる とりあえずまずはインターネットに頼ってみる。noteやQiita…]]></description><link>https://scrymee.github.io/s0uqBlog/2923409553/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2923409553/</guid><pubDate>Mon, 17 Mar 2025 00:01:55 GMT</pubDate><content:encoded>&lt;p&gt;問題や課題に直面した時、学ぶ必要性を感じることがある。そういったときに、学びを得る手段について、雑にまとめる&lt;/p&gt;
&lt;h2&gt;ググる&lt;/h2&gt;
&lt;p&gt;とりあえずまずはインターネットに頼ってみる。noteやQiitaに解決策が書かれて課題が解決する時もあるし、書き手の熱量から漠然とした前向きな姿勢につながる時もある。
ただ、課題を明確に言語化できていないようなときや、特殊なケースであるがゆえに事例を探れない時はあまり向かない。&lt;/p&gt;
&lt;h2&gt;AIに雑に投げる&lt;/h2&gt;
&lt;p&gt;最近はググるより、AIに尋ねることが多くなってきてる。一般的な課題においては、漏れなくダブりなく一般論をベースにした解決策を教えてくれる。
課題が明確でない時や、課題を認識するうえでの前提知識が不足しているとき、そういったが模索中の時は良い壁打ち役になる。&lt;/p&gt;
&lt;h2&gt;本を読む&lt;/h2&gt;
&lt;p&gt;本もいまだに強い。編集者や書き手のコストがかかって出版されているため、主張に事実が裏打ちされていたり、主張が明白だったりする。玉石混合な点は否めないが、それでもインターネットよりはその比率は少ないと感じる。
包括的な知識を学ぶ…という点はAIに置き換わるかもしれないが、全体像を掴む、だったり、より専門的な知識を学ぶときは本場強い。&lt;/p&gt;
&lt;h2&gt;周りを見渡す&lt;/h2&gt;
&lt;p&gt;本やテレビ、インターネット記事や動画、映画や芸術作品…などいろんな方法で情報を集めることができるようになった。ただ、それらと同じくらいに自分の身の回りから学ぶこともできる。
人に優しくしたいと思った時、自分が普段どういう時にやさしくされたと感じるのか…。仕事で特定の課題について困った時に、上司や周りの人はどう解決しているのか…。
情報収集が手軽になったけれども、身近な経験から学ぶこともある。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[プロジェクト管理のTips]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2782396844/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2782396844/</guid><pubDate>Sun, 12 Jan 2025 10:35:38 GMT</pubDate><content:encoded>&lt;p&gt;進捗管理をするようになった。関連の情報を漁るなかで良いなと思った考え方を雑にまとめる&lt;/p&gt;
&lt;h1&gt;チームの進捗管理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;問題がおきたらすぐに対処して被害を最小限に抑える&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://note.com/daraneko_games/n/nb61c325efee5&quot;&gt;「現実を直視する」進捗管理の考え方と、遅れの取り戻し方｜だらねこ&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;専門家としてお互いに責任を持つ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf&quot;&gt;スクラムガイド&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;売上は顧客のアウトカムより生じる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/moriyuya/product-management-rsgt2023&quot;&gt;「私考える人、あなた作業する人」を越えて、プロダクトマネジメントがあたりまえになるチームを明日から実現していく方法/product management rsgt2023 - Speaker Deck&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;個人の時間管理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;割り込みタスクの優先度を過剰に高くしすぎていませんか&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://naopr.hatenablog.com/entry/2024/08/18/094343&quot;&gt;「割り込みタスクが多くて困ってます」と相談を受けたらマネージャーはどうするか - るさんちまん&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「なにか成果が出そうな研究」という大きなテーマを前に何日も立ち尽くすことも少なくありませんでした。それも「成果につながる課題とは何か」「どうすればその課題が見つかりそうか」「その課題を解決するためにはどんな手段が有効か」とフェーズごとにやるべき作業を細かく分解すると、アイデアが出てくることが多かったんです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://meetscareer.tenshoku.mynavi.jp/entry/20240808-tezuka&quot;&gt;時間の使い方を兼業漫画家に学ぼう。管理職であり連載作家、ピエール手塚先生の事例 - ミーツキャリアbyマイナビ転職&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相手の立場で考える&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zenn.dev/yusuke1225math2/articles/b019400d9e7879&quot;&gt;新卒2年目で退職するエンジニアのAさんへ&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;スプリントに入る前に事前に「機能として何ができていれば完成なのか」「それはどうやってテストできるのか」等が合意できているものだけを着手してください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ryuzee.com/faq/0007/&quot;&gt;1つのプロダクトバックログアイテムが大きくて1スプリントでは作れません。複数スプリントにまたいで開発していいですか？&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;エンジニア前半&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://yoshi389111.github.io/kinokobooks/prog_ja/index.html&quot;&gt;プログラマが知るべき 97 のこと&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[引越しtodo]]></title><description><![CDATA[wbs用に大項目は4個、中項目は10個、小項目は40個くらいにしておく…]]></description><link>https://scrymee.github.io/s0uqBlog/2773942319/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2773942319/</guid><pubDate>Tue, 07 Jan 2025 23:39:39 GMT</pubDate><content:encoded>&lt;p&gt;wbs用に大項目は4個、中項目は10個、小項目は40個くらいにしておく&lt;/p&gt;
&lt;h1&gt;1.物件探し〜&lt;/h1&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 入居先要件定義&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 入居申込完了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;入居先要件定義&lt;/h2&gt;
&lt;p&gt;ざっくばらんに譲れないポイントを絞る。賃貸のサイトとか実際に物件を見に行っても良い。エイブルとかで気になるところを何件か内見しても良い。
ただ、あまり時間をかけるとすぐ希望の部屋が埋まるので注意。好みの物件のうち、1ヶ月空き部屋になるところは少ない。
間取りを図っとくのも良い&lt;/p&gt;
&lt;p&gt;後述するが、退去届の受理から退去までが最短1ヶ月なので、引っ越し前の2ヶ月前から動き始めるのが吉。&lt;/p&gt;
&lt;h2&gt;入居申込完了&lt;/h2&gt;
&lt;p&gt;不動産来訪から入居先決定まで最短1時間で終わる。どっちかというと、時間がかかるのはこっちの要件定義の問題。契約内容は必須か任意かの確認が必要。&lt;/p&gt;
&lt;h1&gt;2.入居日確定〜&lt;/h1&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 退去手続き&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 入居準備&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;退去手続き&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 解約通知書の提出&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 水道の解約&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; ガスの解約&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 電気の解約&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;退去届の提出&lt;/h3&gt;
&lt;p&gt;捺印と現住所を記入後投函。少し高くても、簡易書留にしたほうがいい。僕の場合、郵送しても受理されておらず結果的に退去日がずれてしまった。退去届が消印後1ヶ月が最短のため、注意。&lt;/p&gt;
&lt;h3&gt;ライフライン解約&lt;/h3&gt;
&lt;p&gt;電気ガス水道等は1〜2週間前には受付可能。
まず引っ越し日を決めて逆算して解約しておく。&lt;/p&gt;
&lt;h2&gt;入居準備&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 水道の契約&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; ガスの契約&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 電気の契約&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; インターネット契約&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 郵便局の転送サービス&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 転出届を引っ越し前の市役所へ提出（他市区町村へ行く場合）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;引っ越し会社の手配&lt;/h3&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 引っ越し日の決定&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 引っ越し会社の手配&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;引っ越し日の決定&lt;/h4&gt;
&lt;p&gt;まあ退去届を出した日になるだろうといったところ。&lt;/p&gt;
&lt;h4&gt;引っ越し会社の手配&lt;/h4&gt;
&lt;p&gt;これも退去日が決まり次第、すぐやる。
相見積もりを出したら良いが、見積もり比較サイトで相見積もりすると大量に営業電話がくるのでやめたほうが良い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赤帽&lt;/li&gt;
&lt;li&gt;単身パック&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3.引っ越し準備〜&lt;/h1&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 荷造り&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 粗大ゴミ廃棄&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 引越し先で必要な物整理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;荷造り&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 利用頻度の低いものを梱包&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 不用品の処分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;利用頻度の低いものを梱包&lt;/h3&gt;
&lt;p&gt;1週間程度なくても問題ないものから荷造りする。新居に置くエリア単位で段ボールを分け梱包していくと入居後スムーズ。&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 玄関&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;傘・靴を除き、梱包。
工具系・合羽・雑巾・シューケア等は収納。ハンカチ等も置いているなら。&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; キッチン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包丁まな板フライパンなどを残す。お皿は丼等を残して収納する。&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; ランドリー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;洗剤・柔軟剤・洗濯ネット・歯ブラシ・ドライヤー
タオル
それ以外は収納&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; メイク・化粧品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ある程度最小限にしておく。旅行へ行く想定としてそれ以外は梱包。&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; トイレ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;予備系は全て収納。&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; リビング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本棚類は嵩張るため最後にする。
小物系は収納&lt;/p&gt;
&lt;h4&gt;服&lt;/h4&gt;
&lt;p&gt;頻繁に使用しない服は早めから収納可能&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 服の収納&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 下着の収納&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 不用品の処理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;粗大ゴミの回収の申込はwebで可能だが、最短でも申し込み日から1週間程度先になる。そのため、粗大ゴミとして処分予定のものの精査は、1.2週間前から始めておくほうが良い&lt;/p&gt;
&lt;h1&gt;4.引っ越し当日〜&lt;/h1&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 必要品の梱包&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 引っ越し業者と立ち会い&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 引っ越し作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;5.引っ越し後〜&lt;/h1&gt;
&lt;h2&gt;引越し前の家でやること&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 退去後の掃除&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 退去立ち会い&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;引越し後の家でやること&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 荷解き&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 各種手続き&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;退去後掃除&lt;/h2&gt;
&lt;p&gt;汚れはある程度落としておくと不要な費用を請求されにくい。&lt;/p&gt;
&lt;h2&gt;退去後の立ちあい&lt;/h2&gt;
&lt;p&gt;日程決めから15-30分程度。鍵を持っておく。&lt;/p&gt;
&lt;h2&gt;各種手続き&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; マイナンバー変更届を市役所で申請&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 転入届/転居届を市役所に提出&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 国民年金の手続き（マイナンバーがあれば不要）&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 免許の住所変更を警察署で手続き&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 定期の変更&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 通販サイトの住所変更&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; クレジットカードの住所変更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考
&lt;a href=&quot;https://www.monosus.co.jp/posts/2017/03/031656.html&quot;&gt;https://www.monosus.co.jp/posts/2017/03/031656.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[「できない」の背景を考える]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2665133558/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2665133558/</guid><pubDate>Sun, 17 Nov 2024 01:05:45 GMT</pubDate><content:encoded>&lt;p&gt;「○○の資料作ってくれませんかね〜」といった依頼に対して、「難しいですね〜。」「面倒ですね〜」といった反応を受ける&lt;/p&gt;
&lt;p&gt;こういったやりとりには言葉にはしていない（出来ていない）背景がある。これを汲み取れる人は共感性が高く、多くの人から信頼されているように見える。&lt;/p&gt;
&lt;p&gt;表面上をとらえず、言語化や本質的な問いを考えれるような人はすごい。凡人の私は、一旦自分の経験をまとめておく。&lt;/p&gt;
&lt;h1&gt;実装に近いとき&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;時間がなくて、できない&lt;/li&gt;
&lt;li&gt;やり方がわからなくて、できない&lt;/li&gt;
&lt;li&gt;完成系がわからなくて、できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;業務に近いとき&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;顧客の要望でできない&lt;/li&gt;
&lt;li&gt;予算の都合でできない&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;共通&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;体力がなくて、できない&lt;/li&gt;
&lt;li&gt;個人的理由（個人の好き嫌い）で、できない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コミカライズ作品の、「誰かがそれをしないのは、できない理由がある」というセリフが好きなのだが、それを胸に抱えておこう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[「嘘をついていない」と言えるように準備する]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2654010596/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2654010596/</guid><pubDate>Wed, 13 Nov 2024 03:25:22 GMT</pubDate><content:encoded>&lt;p&gt;解像度が高くプロジェクトの遂行力の高い上司に言われた意見の中で、これはいいなと思ったものがあったので、ざっくりまとめる。&lt;/p&gt;
&lt;h2&gt;嘘をつかない&lt;/h2&gt;
&lt;p&gt;仕事をしていると、何かしらの自分の意見や考えを伝えることも多い。そのようなとき、第三者から突っ込まれても、回答できるかという視点で見ていくのが肝心。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;できるかわからないものを「出来る」という&lt;/li&gt;
&lt;li&gt;やると言っていないことを、「やる」と書く&lt;/li&gt;
&lt;li&gt;裏付けが取れていないものをあたかも事実のように書く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こういったものは、経験上多くが「嘘を吐こう」と思って言ったものではない。むしろ出癖だったり、締め切りや体調の兼ね合いでつい口から出た…みたいなことが多い。
例えば、前株のところを「○○株式会社 様」と書いてしまった。画面仕様書にて不要なインタラクション要素を出癖で書いてしまった。ラベル名称は他機能との命名を意識せず、出癖で書いてしまった…など。&lt;/p&gt;
&lt;p&gt;うっかりの嘘も、それをきっかけに大きな問題を引き起こすことにつながる。リリース直前に発覚した表記揺れの対応に終電間際までバタついたこともある。&lt;/p&gt;
&lt;p&gt;ここで言いたいのは、ポリシーを持つということ。
他人に言われたから…とか、前の資料がそう書かれてたから…ではなく、自分なりの裏付けや根拠を明確にしていくことが大事。&lt;/p&gt;
&lt;p&gt;そういう上司も自分が数週間前に作成した資料を見て「なんでここ色つけだったんだっけなあ」と悩んでいた。物事の大小を問わず、すべてのアウトプットに理由を持っていくと、物事の解像度が上がる。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[「記憶力を強くする」備忘録]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2616268674/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2616268674/</guid><pubDate>Sun, 27 Oct 2024 02:54:15 GMT</pubDate><content:encoded>&lt;p&gt;池谷裕二 著の「記憶力を強くする」を読んだ。脳科学の観点で脳の部位の記憶を司る要素を学べる本だった。簡単な備忘録をまとめておく。&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;記憶は刺激が好き&lt;/p&gt;
&lt;h2&gt;何が重要か&lt;/h2&gt;
&lt;p&gt;脳の海馬への刺激が記憶力へ起因することが明らかになってきた。海馬は直接的な刺激だけでなく、刺激的な環境に身を置くことでも刺激を受ける。これにより記憶力の定着に加え、ストレス低減も期待できる&lt;/p&gt;
&lt;h2&gt;詳しく見る&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;脳は、神経細胞（ニューロン）同士がシナプスによる繋ぎ合わさって出来ている&lt;/li&gt;
&lt;li&gt;特に脳の海馬が記憶の起因に関わり、刺激により海馬の神経細胞やシナプスは変化し続ける&lt;/li&gt;
&lt;li&gt;海馬はゲートウェイのようなもので、側頭葉がROM部分である。海馬への記憶は一部キャッシュされ、利用頻度が下がると揮発する。無意識かそうでないかの違いは記憶位置のイメージ。&lt;/li&gt;
&lt;li&gt;記憶の種類は、意味記憶・エピソード記憶。年齢を重ねるにつれエピソード記憶が優位になるようだ。&lt;/li&gt;
&lt;li&gt;パブロフの犬に代表されるオペラント学習を行いつつ、曖昧なものを共通化するファジー学習により柔軟な思考が可能となる。&lt;/li&gt;
&lt;li&gt;異なる出来事間の関係性を見抜くオペラント学習を続けることで、ストレスも低減される。&lt;/li&gt;
&lt;li&gt;海馬へは、意欲的な取り組み・刺激的な環境に身を置くことによって刺激される。&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ジャブを打つ]]></title><description><![CDATA[自分が参画しているプロジェクトのPM…]]></description><link>https://scrymee.github.io/s0uqBlog/2607126895/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2607126895/</guid><pubDate>Wed, 23 Oct 2024 03:56:23 GMT</pubDate><content:encoded>&lt;p&gt;自分が参画しているプロジェクトのPMは良く「ジャブを打つ」と言っている。何か将来的な懸念点となりそうなテーマを見つけた時や、大前提となる事象がひっくり返りそうな恐れがあるテーマを取り扱う時といった場面で使っている。&lt;/p&gt;
&lt;p&gt;今すぐに決める話ではないですけど、ここは課題または前提として共通認識を持っておきたい…というときに、「ジャブを打っておいて」と言われる。&lt;/p&gt;
&lt;p&gt;一言にジャブを打つといってもアプローチの仕方はいろいろあるようで、ざっくりした期限を切るものや、前提条件を提示したり、将来の展望を踏まえてテーマを投げかけるなど、目的によって方法は異なる。&lt;/p&gt;
&lt;p&gt;「来週リリースを予定しています」「この部分、追加カスタマイズについては別途費用請求になります」「この点懸念点として上がり、対応規模にも影響しそうですので、次回のお打ち合わせでお話ししましょう」だとかそういったイメージ。&lt;/p&gt;
&lt;p&gt;こういうのって、結論の先延ばしではなく、考慮する部分が多くボトルネックを考慮すると決定は難しい…といったケースに使える。機能としてはシンプルでも、実際はマスタ整備が大変で、整備するとなるとシステムを超えて社全体で取り組む課題となり得るような問題が潜在的にある…とかそういうとき。&lt;/p&gt;
&lt;p&gt;最終的に境界線を線引きする必要はあるのだが、その部分になると本質的な話から逸れてしまうような時の前置きに使えたりする。&lt;/p&gt;
&lt;p&gt;自分の場合気になったことは白黒はっきりつけたくなるのだけど、そういうときは考慮漏れだったり、把握不足じゃないか疑っていきたい部分だと思う。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[自分のGitの運用方法]]></title><description><![CDATA[何人かのメンバーに同時並行的に発生する課題をお願いする機会が増えてきた。GitFlow…]]></description><link>https://scrymee.github.io/s0uqBlog/2568435653/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2568435653/</guid><pubDate>Sun, 06 Oct 2024 03:14:05 GMT</pubDate><content:encoded>&lt;p&gt;何人かのメンバーに同時並行的に発生する課題をお願いする機会が増えてきた。GitFlowをベースにした開発手法はもちろん知っているが、どう言う方針で進めていくかに自分の考えを整理しておく。&lt;/p&gt;
&lt;h2&gt;基本構造は主ブランチと従ブランチ&lt;/h2&gt;
&lt;p&gt;最小構成要素 を主ブランチとし、そこから派生するブランチとして従ブランチがある。主ブランチは、関わる人全員で確認しうるという部分で切り分ける。従ブランチは、主ブランチの一部機能という役割を持つ。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;____________  主ブランチ
   \________. 従ブランチ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;構造の単位は再帰的に増え続ける&lt;/h2&gt;
&lt;p&gt;この構造は再帰的に繰り返され、見る視点によっては従ブランチが主ブランチとなることもある。&lt;/p&gt;
&lt;p&gt;以下のケースだと、ブランチBは、ブランチAから見たときは従ブランチだが、ブランチCから見ると、主ブランチとなる&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;____________  ブランチA
   \________. ブランチB
      \_____  ブランチC&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;これ以上分割できない最小ブランチにfeatureプレフィックスをつける&lt;/h2&gt;
&lt;p&gt;自分が開発してる案件では、featureプレフィクスは、作業者が基本的に1人で、リモートリポジトリの強制的変更が可能なブランチにつけてもらっています。
具体的には以下のようにコミットログに対して破壊的変更が容認されるケースとしています&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git push --force-with-lease
git rebase 主ブランチ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;リリースの単位・featureにしていたところ規模の大きい開発だと、複数メンバーが関わるため、featureからさらにfeatureブランチを切る…となりプレフィックスが煩雑になったからです。&lt;/p&gt;
&lt;h2&gt;ブランチの切り方&lt;/h2&gt;
&lt;p&gt;開発環境は以下の4パターン用意した方が良いというのをみたことがある。業務に近いところから開発に近いところまで、それぞれの環境で確認する目的が異なるからという論説だったと記憶している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;①本番&lt;/li&gt;
&lt;li&gt;②検収&lt;/li&gt;
&lt;li&gt;③結合&lt;/li&gt;
&lt;li&gt;④開発（ローカル）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それがしっくりきたので、ブランチも同じように環境ごとに用意した方が良いと思っています。&lt;/p&gt;
&lt;h3&gt;本番ブランチ&lt;/h3&gt;
&lt;p&gt;リリース済みのブランチとする。hotfixを除き、検収ブランチからのMergeコミットしか反映されないはず。ただ、後述するように本ブランチはなく、検収ブランチがこの役割となることが多いイメージ。&lt;/p&gt;
&lt;h3&gt;検収ブランチ&lt;/h3&gt;
&lt;p&gt;本番ブランチと分ける場合、本番にはリリースしていないが、近いうちにリリースする機能が含まれているブランチを指す。hotfixを除き結合ブランチからのMergeコミットしか反映されないはず。&lt;/p&gt;
&lt;p&gt;個人的には、特殊な事情がない限り明示的に意識しなくても良いと思う。（だから当初のgitflowのリリースブランチは一時的に作成されていたのかと今合点が言った。）
以下のケースでなければ、本番＝検修としても良さそう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検収からリリースまでのペンディングが長い性質がある。&lt;/li&gt;
&lt;li&gt;本番のhotfixが多い性質がある。&lt;/li&gt;
&lt;li&gt;本番ブランチにコミットしたら即反映という環境になっている。&lt;/li&gt;
&lt;li&gt;リリース内容を管理していない。（Gitのタグやマイルストーンを使わずに、リリース管理表などがない）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;結合ブランチ&lt;/h3&gt;
&lt;p&gt;検収前の社内確認用ブランチ。超軽微な修正等を除き、開発ブランチ・別の結合ブランチからのMergeコミットしか反映されない。経験上コミットをトリガーとしたCI/CDが導入されがち。&lt;/p&gt;
&lt;p&gt;結合ブランチさ再起的なものとして、結合ブランチを取りまとめる結合ブランチも作る時もある。&lt;/p&gt;
&lt;p&gt;▼イメージ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  ________ 会員住所・名前変更
_/________ 会員情報変更
   \______ 会員メールアドレス変更&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どの機能の塊で結合ブランチを作るかはブランチ運用の腕の見せ所っぽい。チケット管理していたら比較的切りやすい気がする。&lt;/p&gt;
&lt;h4&gt;検収・結合時にビジネス側要望として一部機能が不要になった場合どうする？&lt;/h4&gt;
&lt;p&gt;この疑問よくあるケースかもしれないけど、確認時のコードは、不可逆なもののため、確認後に一部機能を取り除き（その後の確認なしに）完成とする…といった芸当はできない。&lt;/p&gt;
&lt;p&gt;結局はrevertからのチェリーピックやMergeを持ってブランチを再構築し、再検収を依頼する必要がある。&lt;/p&gt;
&lt;p&gt;基本的にはログが複雑になるので全開発メンバー合意済みであれば既存ブランチを削除して同名ブランチで作り直したいところ。&lt;/p&gt;
&lt;p&gt;自分の尊敬するプロジェクトマネージャーは、事前にこの前提をステークホルダーへ共有していることが多い。確認・テストの再実施が必要になるため、期限内の完了が難しくなるので、お互い決めのタイミングできっちり決めていきましょうね。という具合にやってる。&lt;/p&gt;
&lt;h4&gt;検収・結合テスト時にバグが見つかった&lt;/h4&gt;
&lt;p&gt;環境に対応するブランチでhotfixプレフィックスでコミットを行う。その後、開発ブランチに下る形で対応をマージしていく。&lt;/p&gt;
&lt;h2&gt;開発ブランチ&lt;/h2&gt;
&lt;p&gt;結合ブランチから作られる開発者のローカルブランチ。作業者は基本1人。動作確認が完了した時に、結合ブランチへMergeする。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;一旦雑にまとめてみたけど、環境や社内ルール次第で変わるから汎用的な決め事は難しそう。案件が変われば変わりそう。&lt;/p&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/ja/get-started/using-github/github-flow&quot;&gt;Githubフロー&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[設計書に必要な要素]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2565155144/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2565155144/</guid><pubDate>Thu, 03 Oct 2024 23:36:40 GMT</pubDate><content:encoded>&lt;p&gt;最近設計書を最近書くことが多い。たた同じ設計書というテーマを切り取っても、情報が過不足なく書かれて分かりやすいものと、過不足が多く分かりにくい内容となっているものがある。&lt;/p&gt;
&lt;p&gt;設計へ関わるにつれ、良い設計書・悪い設計書を感覚的に判断できるようになってきた。そうやって玉石混交の設計書を見たものの、書き手としてその経験をうまく活かせていないと感じる。&lt;/p&gt;
&lt;p&gt;良いなと思った設計書の要素について言語化してみる。体系的にまとめられている文献もあるはずなので、そっちも近々読んでいきたい部分ではある。&lt;/p&gt;
&lt;p&gt;自分の経験が、既存システムの改修ベースであるため、その前提に立った目線となる。ゼロベースからのシステム構築はまた考慮ポイントも変わりそう。&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;より業務・要望に違いステークホルダーへ向けて書く項目。なぜやるか、どの機能をやるか…といった部分を書く。&lt;/p&gt;
&lt;h3&gt;目的&lt;/h3&gt;
&lt;p&gt;設計書の機能導入に至った経緯。影響範囲の調査にも役立つ部分となる。具体的に言い切るのも必要だが、言い過ぎない。システムを導入して顧客満足度を高める。みたいな表現は、何にでも当てはまるため避けたい。&lt;/p&gt;
&lt;h3&gt;前提条件&lt;/h3&gt;
&lt;p&gt;上手い設計者は前提条件の設定が上手い気がする。対顧客にとっては期待値のズレを減らせるし、対開発メンバーにとっては、影響範囲・考慮部分を明示的に伝えられる。&lt;/p&gt;
&lt;p&gt;自分の性格的に、よくここを覆されるとどうしようと悩んでしまうが、キリがないので考えない。&lt;/p&gt;
&lt;p&gt;ただ、システム的に改修が容易と想定できる部分において前提は切らない。（例えば商品マスタに保存されている情報を出す出さないの表示など）&lt;/p&gt;
&lt;h3&gt;追加機能&lt;/h3&gt;
&lt;p&gt;設計書の実装をすることで、ステークホルダーは何を実現できるのかを書いている。例えば、「会員情報の変更機能」だと以下のイメージ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パスワードを除く会員の各種情報を変更できる&lt;/li&gt;
&lt;li&gt;メールアドレスが変更された時、変更前・変更後のメールアドレスそれぞれで変更メールを受信できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;対応範囲&lt;/h3&gt;
&lt;p&gt;機能ベースで対応範囲を書く。既存機能の改修か新規機能の追加か。またそれぞれの機能に対してカスタマイズ概要を箇条書きで書く。&lt;/p&gt;
&lt;p&gt;個人的な感覚として8割くらいは既存機能の改修が入る気がする。もし存在しているのであれば、関連する設計書の導線もあると良い。&lt;/p&gt;
&lt;h2&gt;基本設計&lt;/h2&gt;
&lt;h3&gt;アクセス制御&lt;/h3&gt;
&lt;p&gt;アクセス権限や導線表示条件などを書く。
上手い人は、上に見出しを書きそれぞれ項目を書き出していることが多い。これは設計書全体で統一されている。&lt;/p&gt;
&lt;p&gt;▼イメージ&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ログイン&lt;/td&gt;
&lt;td&gt;ログイン済のみ&lt;/td&gt;
&lt;td&gt;ログインユーザーは規約には同意済みの前提&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;設計書が上手い人からレビューを受けた時に言われたのが、「書き方にポリシーを持つ」だった。表・レイアウト・線といった部分に自分の矜持を持っていると、読み手としても見やすいし、なによりかっこいい。&lt;/p&gt;
&lt;p&gt;また正規化目的で、別のシートを参照する場合、以下の記述で参照している。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【1．画面設計書】&gt; 【入力条件】参照&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;表示項目&lt;/h3&gt;
&lt;p&gt;どのテーブルの何のカラムからデータを表示するかを書く。ここは様々な意見があるのを承知だが、表示項目の各種内容に対してSQLライクな抽出条件が書かれている方が個人的にわかりやすいと感じた。&lt;/p&gt;
&lt;p&gt;ただ、お客様提示資料にどこまで載せるかといった部分は案件によってよりけりだと思う。&lt;/p&gt;
&lt;h3&gt;入力項目・制御&lt;/h3&gt;
&lt;p&gt;機能単位でユーザーに入力されうる項目についての制御情報。何をどう言う形式で受け入れるかといった内容を書く。&lt;/p&gt;
&lt;p&gt;ユーザーが自由に入力・編集できる項目は、SQLインジェクションなどがあり危険なため、制御も明示的に書かれておる。「半角英数字のみ」などがよくある。&lt;/p&gt;
&lt;p&gt;後述の画面設計図と組み合わせて書かれていることも多いイメージ。&lt;/p&gt;
&lt;h3&gt;画面設計図&lt;/h3&gt;
&lt;p&gt;画面レイアウトや入出力項目の画面イメージに該当するもので、どこに何が配置されるかや、それぞれの要素の名称・アクション名・備考等を書く。図式することが多い。設計者の腕の見せ所でもある。&lt;/p&gt;
&lt;h4&gt;画面遷移図&lt;/h4&gt;
&lt;p&gt;画面上でアクションを実行した場合の遷移先を示す。正常系だけでなく、エラー時の遷移も行う。画面設計図に合わせて描かれることも多い。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://xtech.nikkei.com/it/article/COLUMN/20090108/322455/&quot;&gt;画面の構造は物理的・論理的に示す&lt;/a&gt;
&lt;a href=&quot;https://www.ipa.go.jp/archive/files/000004517.pdf&quot;&gt;機能要件の合意形成ガイド&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[知らない事への恐怖に向き合う]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2554691194/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2554691194/</guid><pubDate>Wed, 02 Oct 2024 12:59:13 GMT</pubDate><content:encoded>&lt;p&gt;思い通りにいかずに、冷静な判断ができなくなったり、焦って思ってもいないことを口に出して後悔する。特に抽象的な課題と向き合うようになって、そのような場面に陥りがちだったりする。&lt;/p&gt;
&lt;p&gt;アンガーマネジメントの手法とかもあるのは知っているが、ケースバイケースで考えるほうがしっくりくるので、自分がどういうときに冷静になれないかをざっくりまとめる。&lt;/p&gt;
&lt;h2&gt;「何をしたらいいんだよ！」と思うとき&lt;/h2&gt;
&lt;p&gt;経験のない未知の役割を託されたときに、思ってしまうことが多い。例えば、知らないインフラのメリデメを考えるとか、今までやったことのない工程を任されるとか。&lt;/p&gt;
&lt;p&gt;こういうときは、その現象と直接向き合っても解決策が見つからなかったりする。&lt;/p&gt;
&lt;p&gt;自分なりの解決策としては、「何を知らないのか」を考えて落ち着くことが多い。
特に今はAIに壁打ち役に徹してもらえるので、なんとなく腹落ちする意見を聞けたりする。&lt;/p&gt;
&lt;p&gt;最近の例であれば、「要件定義をしてほしい」と言われたとき。
今まで基本設計～実装を主にやっていた自分の感覚だと、要件定義は基本設計や詳細設計と並行でする必要があると思い込んでいた。&lt;/p&gt;
&lt;p&gt;そういう不安なときに、割と腹落ちする意見を見た。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要件定義は、【なぜ】やりたいか、と【何を】やりたいかを明確にする作業で、基本設計は、【どうやって】やるか&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正しいかはさておき、自分なりの不明点を明確にして腹落ちさせる作業を入れるのはよさそう。ドキュメントや過去事例があるなら、相談してみるのもよい。&lt;/p&gt;
&lt;h2&gt;「なんでやってくれないんだ！」と思うとき&lt;/h2&gt;
&lt;p&gt;指示を受けたときに「なんでやらないの？」と言われると当然苦しい。ただ、指示する側になったときに、口に出すことは当然ないが、そう思ってしまうことがあり落ち込むときがある。自分もひどくダブスタ…。&lt;/p&gt;
&lt;p&gt;この場合は、大体その人にはできない事情があることが多い。スキル的に難しかったり、別プロジェクトの差し込みがあったり…etc。その事情を知らないから、何かしら感情が動いてしまう。&lt;/p&gt;
&lt;p&gt;そういった部分は、マイクロマネジメントにならないように、しっかりと知っていく必要がある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「他者が『こうすればいいのに』と思うとき、そこにはできない理由がある」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好きな漫画にこういったセリフがあるので、しっかり胸に秘めておく。&lt;/p&gt;
&lt;h2&gt;「なんでこんなことを言われるんだ！」と思うとき&lt;/h2&gt;
&lt;p&gt;これも同様に、相手がそれを伝える事情があったりする。大体視座の高い観点の話になる。売り上げだったり、利益率だったり。&lt;/p&gt;
&lt;p&gt;自分の今まで経験した仕事よりも高い負荷の課題に取り組んでいると、そう言われることが多い気がする。自分も手一杯だったり、解決策が見当たらないときに、正論を言われつらくなる。ただ、こういうときは、考慮すべき観点が抜け落ちていたりする。&lt;/p&gt;
&lt;p&gt;「何がわからないかわからない状態」のときは特に恐怖を覚えるのだけど、優しい人は、考え方と理由を丁寧に伝えてくれるので、そういうのは素直に聞くのが筋。ただ、たまに言い方に癖が強い人もいるので、念頭に置くとよさそう。&lt;/p&gt;
&lt;h2&gt;参考にしたい&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/tumada/jie-xiang-du-wogao-meru&quot;&gt;解像度を上げる 🔬 - Speaker Deck&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[要件定義をうまく進める人の特徴]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2560624543/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2560624543/</guid><pubDate>Wed, 02 Oct 2024 12:28:39 GMT</pubDate><content:encoded>&lt;p&gt;要件定義の上手い人がいる。要件定義フェーズでは、抽象的な要望で実際に実装に落とし込むための正解も見えず、自分も相手も要望が不明瞭な時も多い。&lt;/p&gt;
&lt;p&gt;そんなふわっとした状況下でも、その人に任せるといつのまにか、方針と役割が定まっていく。&lt;/p&gt;
&lt;p&gt;作業プロセスが明確な課題に対してはそんなに苦手意識はない。ただ、何を決めたら良いか不明瞭な課題となると、とっかかりもわからず、悩み続けてしまう。&lt;/p&gt;
&lt;p&gt;「えいや」と決めようとしても、現フェーズに考えるべきではない詳細な決め事を先んじて決めようとしてしまい、混乱を生んでしまう。&lt;/p&gt;
&lt;p&gt;そういった切り分けが得意で、顧客のニーズとの向き合い方・期待値のすり合わせ方が上手い人を見た時の感想を雑にまとめる。&lt;/p&gt;
&lt;h2&gt;成果物以外もチェックする&lt;/h2&gt;
&lt;p&gt;優秀な人ほど、どの議事録や各種資料に根拠があるかすぐに出せる人が多い。&lt;/p&gt;
&lt;p&gt;最終的な資料だけ見るのではなく、そこに至るまでの経緯もドキュメントも目を通している。自分が関わっていない案件でも、その辺りの読み込み力が高い。&lt;/p&gt;
&lt;h2&gt;自分のやる・やらないの前提を切る&lt;/h2&gt;
&lt;p&gt;予算を鑑みて、基本的には前提の認識合わせしている。根拠となる資料がある場合は、「この部分はこの範囲を前提としますね。」と言いながらテンポよく進めている。&lt;/p&gt;
&lt;p&gt;こうやって進めても、前提を超える範囲も対応が必要になることもある。ただ、前提がある以上スケジュールや予算に対して相手の理解を得やすく、セーフティーネットになることが多い。&lt;/p&gt;
&lt;h2&gt;ただの認識合わせはさくっと、しっかり詰めたいところは念入りに&lt;/h2&gt;
&lt;p&gt;各課題へ所要時間の観点を意識している。例えば、全てを会議の場で設けるのではなく事前ヒアリングシートの提示やマトリクス図を書いている。&lt;/p&gt;
&lt;p&gt;逆に本質をクリアにするため、詳細をあえて削り、不要な議論を生まないよう、注意を払っているように見える。&lt;/p&gt;
&lt;h2&gt;スコープを決める&lt;/h2&gt;
&lt;p&gt;細かい話をすると本質がブレてしまうがままあるためか、スコープをはっきりと決めていることが多い。&lt;/p&gt;
&lt;p&gt;例えばステークホルダーの認識合わせの時は、各ステークホルダーが「何をするか」という話だけする…という感じになる。
本来、5W1Hや6W2Hといったフレームワーク観点からは、MECEではないが、具体化によって実現可否の課題に移行してしまったり、別の課題が表層化して何も決まらなくなることが多く発生することがある。&lt;/p&gt;
&lt;p&gt;ただ、無策で挑むわけでなく、そういった課題は次工程移行に相談するように事前に伝えている。&lt;/p&gt;
&lt;h2&gt;絵を描く&lt;/h2&gt;
&lt;p&gt;期待値を合わせるため、叩き台を作成している。ゼロベースの作成ではなく、先方が既知のものをベースに作成し、要求とすり合わせながら、現行との違いを提案している。&lt;/p&gt;
&lt;p&gt;かつて、読んだ本に同じ趣旨の内容があり、その発想に近そう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ゲーム事情に精通しているゲームクリエイター達に「MOTHERみたいな空気感」というと、具体的に説明せずとも雰囲気が伝わる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「巨人の方に乗る」も同じ意味かもしれない。&lt;/p&gt;
&lt;p&gt;列挙しながら思ったけれど、「過去の事例を参考に事前準備をした上で、どうやって進めるか自分なりの進め方の仮説をもとに、進めている」というのが強い人に共通している気がする。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[人に質問・依頼するタイミング]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2551694060/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2551694060/</guid><pubDate>Fri, 27 Sep 2024 00:41:48 GMT</pubDate><content:encoded>&lt;p&gt;これまで人から依頼を受けそれを着手することが多かったけれども、最近は人のアサインを管理したり、抽象的な課題を取りまとめることが増えてきた。概要を整理してメンバーへお願いしたり、抽象的な課題で認識を合わせるために質問に伺ったりと、コミュニケーションが増えている。&lt;/p&gt;
&lt;p&gt;対人の機会が増えるにつれて、人に何かしらをお願いするときのタイミングがあるように気づいてきた。問題が発覚し次第、条件反射的に質問を投げかけても、本質がうまく解決しないことがあるみたい。「顧客は自分が本当に欲しいものを理解していない」という言葉があるが、まさにそれと同じ。特に自分の性格上、これを良くやってしまうので、一度整理しておく。&lt;/p&gt;
&lt;h2&gt;雄弁は銀・沈黙は金&lt;/h2&gt;
&lt;p&gt;分からない部分があっても条件反射的に対人に向けて行動はしないほうが良い。例えば困難に直面した時に不明点が不明瞭なまま勢いで質問に行ったり、とりあえずメンバーを集めて会議をしたり。優秀な人が筋道立てて整理してくれることもあるけれど、大体微妙な空気になってしまう。&lt;/p&gt;
&lt;p&gt;勢いも肝心なのは分かるし、おそらく人間の性質として不明や疑問があることはストレスを感じるものだったりする。ただ、巻き込まれた人にとってゴールが不明瞭なものもストレスだと思うので、踏ん張って別のアプローチを考えていく必要がありそう。&lt;/p&gt;
&lt;p&gt;個人的に良いなと思ったのは、熟考して整理して自分なりの&lt;strong&gt;結論を出す時間を意図的に作る&lt;/strong&gt;こと。当たり前の部分ではあるが、切羽詰まっている時は、案外忘れてしまう。煮詰まったりストレスを感じた時は、個人的には&lt;strong&gt;深呼吸&lt;/strong&gt;しておくのが割と効果があった。&lt;/p&gt;
&lt;p&gt;まずは自分で内容を整理し、現実的なプランを考える。整理した上で他人への共有・意見・アサイン等を欲しいと感じた上で相談する。&lt;/p&gt;
&lt;p&gt;ただ、そうやっても自分の視座からは結論が出ない時もある。その辺りの見極めも肝要。
「他人に頼らず質問せずに抱え込んでしまうのが一番最悪」と上司が言っているのを聞いた。塩梅に関しては分からない部分ではあるが、工数意識も必要なのかと思う。&lt;/p&gt;
&lt;p&gt;雄弁は銀・沈黙は金という言葉を思い出したので更新。この言葉には「人に相談するのは、熟考してから」も含まれていそう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[雑談力の高い人の特徴]]></title><description><![CDATA[…]]></description><link>https://scrymee.github.io/s0uqBlog/2547939288/</link><guid isPermaLink="false">https://scrymee.github.io/s0uqBlog/2547939288/</guid><pubDate>Thu, 26 Sep 2024 13:14:58 GMT</pubDate><content:encoded>&lt;p&gt;あまり近しい関係ではないにも関わらず懐に入るのが上手かったり、ちょっとした間を繋ぐ会話を繋いでくれる人がいる。別に会話などなくても良いのだが、アイスブレイクというようにその後の関係性が円滑になるようにも思える。&lt;/p&gt;
&lt;p&gt;雑談の効力みたいなのはなんとなく理解はしているけど、自分はそういった魔を埋めるトークが苦手だったりする。得意な人を観察したときの特徴を備忘録としてまとめる。&lt;/p&gt;
&lt;h2&gt;普段との違いに気がつく&lt;/h2&gt;
&lt;p&gt;雑談が上手い人は比較していることが多い気がする。「（昨日と比べて）急に寒くなったね〜」とか。スマホのゲーム画面がチラリと見えて、そこから話題を広げるとか。割と違うことは会話のきっかけになることが多い。&lt;/p&gt;
&lt;h2&gt;物事を腹落ちするまで深く理解している&lt;/h2&gt;
&lt;p&gt;身の回りの物事に興味を持っている人が多い。芸能人の名前がすぐ出てくる。自分の知識をアピールするのではなく、相手に合わせて自分の経験の引き出しから話題を引っ張り出しているイメージが近い。完全に理解する必要はなくて、自分の知っている範囲でも興味を持つ。&lt;/p&gt;
&lt;h2&gt;ポリシーがある&lt;/h2&gt;
&lt;p&gt;自分の中で「好きなもの」「興味のあること」が明確な人が多い気がする。他人の顔色を窺いながら言葉を選ぶばかりでなく、自分の考えや意見は主張する。そういう人との会話は「自分が体験した出来事」が多いので、話を聞いていて楽しい。。度が過ぎるのは良くないが、多少強引なくらいが心地よかったりする。&lt;/p&gt;</content:encoded></item></channel></rss>